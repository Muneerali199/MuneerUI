{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "GridMotion-TS-CSS",
  "type": "registry:block",
  "title": "GridMotion",
  "description": "Perspective moving grid lines based on cusror position.",
  "dependencies": [
    "gsap"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/Backgrounds/GridMotion/GridMotion.tsx",
      "content": "import React, { useEffect, useRef, FC } from 'react';\nimport { gsap } from 'gsap';\nimport './GridMotion.css';\n\ninterface GridMotionProps {\n  items?: string[];\n  gradientColor?: string;\n}\n\nconst GridMotion: FC<GridMotionProps> = ({ items = [], gradientColor = 'black' }) => {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const rowRefs = useRef<(HTMLDivElement | null)[]>([]);\n  const mouseXRef = useRef<number>(window.innerWidth / 2);\n\n  const totalItems = 28;\n  const defaultItems = Array.from({ length: totalItems }, (_, index) => `Item ${index + 1}`);\n  const combinedItems = items.length > 0 ? items.slice(0, totalItems) : defaultItems;\n\n  useEffect(() => {\n    gsap.ticker.lagSmoothing(0);\n\n    const handleMouseMove = (e: MouseEvent): void => {\n      mouseXRef.current = e.clientX;\n    };\n\n    const updateMotion = (): void => {\n      const maxMoveAmount = 300;\n      const baseDuration = 0.8;\n      const inertiaFactors = [0.6, 0.4, 0.3, 0.2];\n\n      rowRefs.current.forEach((row, index) => {\n        if (row) {\n          const direction = index % 2 === 0 ? 1 : -1;\n          const moveAmount = ((mouseXRef.current / window.innerWidth) * maxMoveAmount - maxMoveAmount / 2) * direction;\n\n          gsap.to(row, {\n            x: moveAmount,\n            duration: baseDuration + inertiaFactors[index % inertiaFactors.length],\n            ease: 'power3.out',\n            overwrite: 'auto'\n          });\n        }\n      });\n    };\n\n    const removeAnimationLoop = gsap.ticker.add(updateMotion);\n    window.addEventListener('mousemove', handleMouseMove);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      removeAnimationLoop();\n    };\n  }, []);\n\n  return (\n    <div className=\"noscroll loading\" ref={gridRef}>\n      <section\n        className=\"intro\"\n        style={{\n          background: `radial-gradient(circle, ${gradientColor} 0%, transparent 100%)`\n        }}\n      >\n        <div className=\"gridMotion-container\">\n          {Array.from({ length: 4 }, (_, rowIndex) => (\n            <div\n              key={rowIndex}\n              className=\"row\"\n              ref={el => {\n                rowRefs.current[rowIndex] = el;\n              }}\n            >\n              {Array.from({ length: 7 }, (_, itemIndex) => {\n                const content = combinedItems[rowIndex * 7 + itemIndex];\n                return (\n                  <div key={itemIndex} className=\"row__item\">\n                    <div className=\"row__item-inner\" style={{ backgroundColor: '#111' }}>\n                      {typeof content === 'string' && content.startsWith('http') ? (\n                        <div\n                          className=\"row__item-img\"\n                          style={{\n                            backgroundImage: `url(${content})`\n                          }}\n                        ></div>\n                      ) : (\n                        <div className=\"row__item-content\">{content}</div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ))}\n        </div>\n        <div className=\"fullview\"></div>\n      </section>\n    </div>\n  );\n};\n\nexport default GridMotion;\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/Backgrounds/GridMotion/GridMotion.css",
      "content": ".noscroll {\r\n  height: 100%;\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n\r\n.intro {\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.intro::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-size: 250px;\r\n  pointer-events: none;\r\n  z-index: 4;\r\n}\r\n\r\n.gridMotion-container {\r\n  gap: 1rem;\r\n  flex: none;\r\n  position: relative;\r\n  width: 150vw;\r\n  height: 150vh;\r\n  display: grid;\r\n  grid-template-rows: repeat(4, 1fr);\r\n  grid-template-columns: 100%;\r\n  transform: rotate(-15deg);\r\n  transform-origin: center center;\r\n  z-index: 2;\r\n}\r\n\r\n.row {\r\n  display: grid;\r\n  gap: 1rem;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  will-change: transform, filter;\r\n}\r\n\r\n.row__item {\r\n  position: relative;\r\n}\r\n\r\n.row__item-inner {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  border-radius: 10px;\r\n  background-color: #111;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.row__item-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  background-size: cover;\r\n  background-position: 50% 50%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n}\r\n\r\n.row__item-content {\r\n  padding: 1rem;\r\n  text-align: center;\r\n  z-index: 1;\r\n}\r\n\r\n.fullview {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n}\r\n\r\n.fullview .row__item-inner {\r\n  border-radius: 0px;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}