{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "TrueFocus-TS-CSS",
  "type": "registry:block",
  "title": "TrueFocus",
  "description": "Applies dynamic blur / clarity based over a series of words in order.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/TrueFocus/TrueFocus.tsx",
      "content": "import { useEffect, useRef, useState, RefObject } from 'react';\nimport { motion } from 'motion/react';\nimport './TrueFocus.css';\n\ninterface TrueFocusProps {\n  sentence?: string;\n  manualMode?: boolean;\n  blurAmount?: number;\n  borderColor?: string;\n  glowColor?: string;\n  animationDuration?: number;\n  pauseBetweenAnimations?: number;\n}\n\ninterface FocusRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nconst TrueFocus: React.FC<TrueFocusProps> = ({\n  sentence = 'True Focus',\n  manualMode = false,\n  blurAmount = 5,\n  borderColor = 'green',\n  glowColor = 'rgba(0, 255, 0, 0.6)',\n  animationDuration = 0.5,\n  pauseBetweenAnimations = 1\n}) => {\n  const words = sentence.split(' ');\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const [lastActiveIndex, setLastActiveIndex] = useState<number | null>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const wordRefs: React.MutableRefObject<(HTMLSpanElement | null)[]> = useRef([]);\n  const [focusRect, setFocusRect] = useState<FocusRect>({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n\n  useEffect(() => {\n    if (!manualMode) {\n      const interval = setInterval(\n        () => {\n          setCurrentIndex(prev => (prev + 1) % words.length);\n        },\n        (animationDuration + pauseBetweenAnimations) * 1000\n      );\n\n      return () => clearInterval(interval);\n    }\n  }, [manualMode, animationDuration, pauseBetweenAnimations, words.length]);\n\n  useEffect(() => {\n    if (currentIndex === null || currentIndex === -1) return;\n\n    if (!wordRefs.current[currentIndex] || !containerRef.current) return;\n\n    const parentRect = containerRef.current.getBoundingClientRect();\n    const activeRect = wordRefs.current[currentIndex]!.getBoundingClientRect();\n\n    setFocusRect({\n      x: activeRect.left - parentRect.left,\n      y: activeRect.top - parentRect.top,\n      width: activeRect.width,\n      height: activeRect.height\n    });\n  }, [currentIndex, words.length]);\n\n  const handleMouseEnter = (index: number) => {\n    if (manualMode) {\n      setLastActiveIndex(index);\n      setCurrentIndex(index);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (manualMode) {\n      setCurrentIndex(lastActiveIndex ?? 0);\n    }\n  };\n\n  return (\n    <div className=\"focus-container\" ref={containerRef}>\n      {words.map((word, index) => {\n        const isActive = index === currentIndex;\n        return (\n          <span\n            key={index}\n            ref={el => {\n              if (el) {\n                wordRefs.current[index] = el;\n              }\n            }}\n            className={`focus-word ${manualMode ? 'manual' : ''} ${isActive && !manualMode ? 'active' : ''}`}\n            style={\n              {\n                filter: manualMode\n                  ? isActive\n                    ? `blur(0px)`\n                    : `blur(${blurAmount}px)`\n                  : isActive\n                    ? `blur(0px)`\n                    : `blur(${blurAmount}px)`,\n                transition: `filter ${animationDuration}s ease`,\n                '--border-color': borderColor,\n                '--glow-color': glowColor\n              } as React.CSSProperties\n            }\n            onMouseEnter={() => handleMouseEnter(index)}\n            onMouseLeave={handleMouseLeave}\n          >\n            {word}\n          </span>\n        );\n      })}\n\n      <motion.div\n        className=\"focus-frame\"\n        animate={{\n          x: focusRect.x,\n          y: focusRect.y,\n          width: focusRect.width,\n          height: focusRect.height,\n          opacity: currentIndex >= 0 ? 1 : 0\n        }}\n        transition={{\n          duration: animationDuration\n        }}\n        style={\n          {\n            '--border-color': borderColor,\n            '--glow-color': glowColor\n          } as React.CSSProperties\n        }\n      >\n        <span className=\"corner top-left\"></span>\n        <span className=\"corner top-right\"></span>\n        <span className=\"corner bottom-left\"></span>\n        <span className=\"corner bottom-right\"></span>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default TrueFocus;\n",
      "type": "registry:component"
    },
    {
      "path": "public/ts/default/src/ts-default/TextAnimations/TrueFocus/TrueFocus.css",
      "content": ".focus-container {\r\n  position: relative;\r\n  display: flex;\r\n  gap: 1em;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.focus-word {\r\n  position: relative;\r\n  font-size: 3rem;\r\n  font-weight: 900;\r\n  cursor: pointer;\r\n  transition:\r\n    filter 0.3s ease,\r\n    color 0.3s ease;\r\n}\r\n\r\n.focus-word.active {\r\n  filter: blur(0);\r\n}\r\n\r\n.focus-frame {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  box-sizing: content-box;\r\n  border: none;\r\n}\r\n\r\n.corner {\r\n  position: absolute;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  border: 3px solid var(--border-color, #fff);\r\n  filter: drop-shadow(0px 0px 4px var(--border-color, #fff));\r\n  border-radius: 3px;\r\n  transition: none;\r\n}\r\n\r\n.top-left {\r\n  top: -10px;\r\n  left: -10px;\r\n  border-right: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.top-right {\r\n  top: -10px;\r\n  right: -10px;\r\n  border-left: none;\r\n  border-bottom: none;\r\n}\r\n\r\n.bottom-left {\r\n  bottom: -10px;\r\n  left: -10px;\r\n  border-right: none;\r\n  border-top: none;\r\n}\r\n\r\n.bottom-right {\r\n  bottom: -10px;\r\n  right: -10px;\r\n  border-left: none;\r\n  border-top: none;\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}