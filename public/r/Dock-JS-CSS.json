{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Dock-JS-CSS",
  "type": "registry:block",
  "title": "Dock",
  "description": "macOS style magnifying dock with proximity scaling of icons.",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "public/default/src/content/Components/Dock/Dock.jsx",
      "content": "'use client';\n\nimport { motion, useMotionValue, useSpring, useTransform, AnimatePresence } from 'motion/react';\nimport { Children, cloneElement, useEffect, useMemo, useRef, useState } from 'react';\n\nimport './Dock.css';\n\nfunction DockItem({ children, className = '', onClick, mouseX, spring, distance, magnification, baseItemSize }) {\n  const ref = useRef(null);\n  const isHovered = useMotionValue(0);\n\n  const mouseDistance = useTransform(mouseX, val => {\n    const rect = ref.current?.getBoundingClientRect() ?? {\n      x: 0,\n      width: baseItemSize\n    };\n    return val - rect.x - baseItemSize / 2;\n  });\n\n  const targetSize = useTransform(mouseDistance, [-distance, 0, distance], [baseItemSize, magnification, baseItemSize]);\n  const size = useSpring(targetSize, spring);\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{\n        width: size,\n        height: size\n      }}\n      onHoverStart={() => isHovered.set(1)}\n      onHoverEnd={() => isHovered.set(0)}\n      onFocus={() => isHovered.set(1)}\n      onBlur={() => isHovered.set(0)}\n      onClick={onClick}\n      className={`dock-item ${className}`}\n      tabIndex={0}\n      role=\"button\"\n      aria-haspopup=\"true\"\n    >\n      {Children.map(children, child => cloneElement(child, { isHovered }))}\n    </motion.div>\n  );\n}\n\nfunction DockLabel({ children, className = '', ...rest }) {\n  const { isHovered } = rest;\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = isHovered.on('change', latest => {\n      setIsVisible(latest === 1);\n    });\n    return () => unsubscribe();\n  }, [isHovered]);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, y: 0 }}\n          animate={{ opacity: 1, y: -10 }}\n          exit={{ opacity: 0, y: 0 }}\n          transition={{ duration: 0.2 }}\n          className={`dock-label ${className}`}\n          role=\"tooltip\"\n          style={{ x: '-50%' }}\n        >\n          {children}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n\nfunction DockIcon({ children, className = '' }) {\n  return <div className={`dock-icon ${className}`}>{children}</div>;\n}\n\nexport default function Dock({\n  items,\n  className = '',\n  spring = { mass: 0.1, stiffness: 150, damping: 12 },\n  magnification = 70,\n  distance = 200,\n  panelHeight = 68,\n  dockHeight = 256,\n  baseItemSize = 50\n}) {\n  const mouseX = useMotionValue(Infinity);\n  const isHovered = useMotionValue(0);\n\n  const maxHeight = useMemo(\n    () => Math.max(dockHeight, magnification + magnification / 2 + 4),\n    [magnification, dockHeight]\n  );\n  const heightRow = useTransform(isHovered, [0, 1], [panelHeight, maxHeight]);\n  const height = useSpring(heightRow, spring);\n\n  return (\n    <motion.div style={{ height, scrollbarWidth: 'none' }} className=\"dock-outer\">\n      <motion.div\n        onMouseMove={({ pageX }) => {\n          isHovered.set(1);\n          mouseX.set(pageX);\n        }}\n        onMouseLeave={() => {\n          isHovered.set(0);\n          mouseX.set(Infinity);\n        }}\n        className={`dock-panel ${className}`}\n        style={{ height: panelHeight }}\n        role=\"toolbar\"\n        aria-label=\"Application dock\"\n      >\n        {items.map((item, index) => (\n          <DockItem\n            key={index}\n            onClick={item.onClick}\n            className={item.className}\n            mouseX={mouseX}\n            spring={spring}\n            distance={distance}\n            magnification={magnification}\n            baseItemSize={baseItemSize}\n          >\n            <DockIcon>{item.icon}</DockIcon>\n            <DockLabel>{item.label}</DockLabel>\n          </DockItem>\n        ))}\n      </motion.div>\n    </motion.div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "public/default/src/content/Components/Dock/Dock.css",
      "content": ".dock-outer {\r\n  margin: 0 0.5rem;\r\n  display: flex;\r\n  max-width: 100%;\r\n  align-items: center;\r\n}\r\n\r\n.dock-panel {\r\n  position: absolute;\r\n  bottom: 0.5rem;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  display: flex;\r\n  align-items: flex-end;\r\n  width: fit-content;\r\n  gap: 1rem;\r\n  border-radius: 1rem;\r\n  background-color: #000000;\r\n  border: 1px solid #222;\r\n  padding: 0 0.5rem 0.5rem;\r\n}\r\n\r\n.dock-item {\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 10px;\r\n  background-color: #000000;\r\n  border: 1px solid #222;\r\n  box-shadow:\r\n    0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  cursor: pointer;\r\n  outline: none;\r\n}\r\n\r\n.dock-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.dock-label {\r\n  position: absolute;\r\n  top: -1.5rem;\r\n  left: 50%;\r\n  width: fit-content;\r\n  white-space: pre;\r\n  border-radius: 0.375rem;\r\n  border: 1px solid #222;\r\n  background-color: #000000;\r\n  padding: 0.125rem 0.5rem;\r\n  font-size: 0.75rem;\r\n  color: #fff;\r\n  transform: translateX(-50%);\r\n}\r\n",
      "type": "registry:item"
    }
  ]
}